{"version":3,"sources":["../../../src/swc/__tests__/sources.test.ts"],"sourcesContent":["import { globSources, slitCompilableAndCopyable } from \"../sources\";\nimport fs from \"fs\";\nimport glob from \"fast-glob\";\n\njest.mock(\"fs\");\njest.mock(\"fast-glob\");\n\ndescribe(\"globSources\", () => {\n  beforeEach(() => {\n    (fs as any).resetMockStats();\n  });\n\n  it(\"exclude dotfiles sources when includeDotfiles=false\", async () => {\n    const files = await globSources([\".dotfile\"], false);\n\n    expect([...files]).toEqual([]);\n  });\n\n  it(\"include dotfiles sources when includeDotfiles=true\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"include multiple file sources\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\", \"file\"]);\n  });\n\n  it(\"exclude files that errors on stats\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: new Error(\"Failed stat\") });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"includes all files from directory\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockResolvedValue([\"fileDir1\", \"fileDir2\"]);\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\", \"fileDir1\", \"fileDir2\"]);\n  });\n\n  it(\"exclude files from directory that fail to glob\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockRejectedValue(new Error(\"Failed\"));\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\"]);\n  });\n});\n\ndescribe(\"slitCompilableAndCopyable\", () => {\n  const extensions = [\".ts\"];\n  it(\"separate compilable and copyable when copyFiles=true\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = slitCompilableAndCopyable(\n      files,\n      extensions,\n      true\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([\"test.txt\"]);\n  });\n\n  it(\"separate compilable and copyable when copyFiles=false\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = slitCompilableAndCopyable(\n      files,\n      extensions,\n      false\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([]);\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","resetMockStats","it","files","expect","toEqual","setMockStats","isDirectory","file","Error","directory","mockResolvedValue","mockRejectedValue","extensions","compilable","copyable"],"mappings":"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"}