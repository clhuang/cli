{"version":3,"sources":["../../src/swc/file.ts"],"sourcesContent":["import swc from \"@swc/core\";\nimport path from \"path\";\nimport slash from \"slash\";\nimport { SourceMapConsumer, SourceMapGenerator } from \"source-map\";\n\nimport { CliOptions } from \"./options\";\nimport { globSources, isCompilableExtension, watchSources } from \"./sources\";\nimport * as util from \"./util\";\n\nexport default async function ({\n  cliOptions,\n  swcOptions,\n}: {\n  cliOptions: CliOptions;\n  swcOptions: swc.Options;\n}) {\n  async function concatResults(\n    file: string,\n    ...results: swc.Output[]\n  ): Promise<swc.Output> {\n    const map = new SourceMapGenerator({\n      file,\n      sourceRoot: swcOptions.sourceRoot,\n    });\n\n    let code = \"\";\n    let offset = 0;\n\n    for (const result of results) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        const consumer = await new SourceMapConsumer(result.map);\n        const sources = new Set<string>();\n\n        consumer.eachMapping(mapping => {\n          sources.add(mapping.source);\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn,\n            },\n            original: {\n              line: mapping.originalLine,\n              column: mapping.originalColumn,\n            },\n            source: mapping.source,\n          });\n        });\n\n        sources.forEach(source => {\n          const content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n      }\n      offset = code.split(\"\\n\").length - 1;\n    }\n\n    return {\n      code,\n      map: JSON.stringify(map),\n    };\n  }\n\n  async function output(results: Iterable<swc.Output>) {\n    const file =\n      cliOptions.sourceMapTarget ||\n      path.basename(cliOptions.outFile || \"stdout\");\n\n    const result = await concatResults(file, ...results);\n\n    if (cliOptions.outFile) {\n      util.outputFile(result, cliOptions.outFile, swcOptions.sourceMaps);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n      if (result.map) {\n        const map = `//#sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(\n          JSON.stringify(result.map),\n          \"utf8\"\n        ).toString(\"base64\")}`;\n        process.stdout.write(map);\n      }\n    }\n  }\n\n  async function handle(filename: string) {\n    const sourceFileName = slash(\n      cliOptions.outFile\n        ? path.relative(path.dirname(cliOptions.outFile), filename)\n        : filename\n    );\n    return await util.compile(\n      filename,\n      {\n        ...swcOptions,\n        sourceFileName,\n      },\n      cliOptions.sync,\n      cliOptions.outFile\n    );\n  }\n\n  async function getProgram(\n    previousResults: Map<string, swc.Output | Error> = new Map()\n  ) {\n    const results: typeof previousResults = new Map();\n\n    for (const filename of await globSources(\n      cliOptions.filenames,\n      cliOptions.includeDotfiles\n    )) {\n      if (isCompilableExtension(filename, cliOptions.extensions)) {\n        results.set(filename, previousResults.get(filename)!);\n      }\n    }\n    return results;\n  }\n\n  async function files() {\n    let results = await getProgram();\n    for (const filename of results.keys()) {\n      try {\n        const result = await handle(filename);\n        if (result) {\n          results.set(filename, result);\n        } else {\n          results.delete(filename);\n        }\n      } catch (err) {\n        console.error(err.message);\n        results.set(filename, err);\n      }\n    }\n\n    if (cliOptions.watch) {\n      const watcher = await watchSources(\n        cliOptions.filenames,\n        cliOptions.includeDotfiles\n      );\n      watcher.on(\"ready\", () => {\n        Promise.resolve()\n          .then(async () => {\n            util.assertCompilationResult(results, cliOptions.quiet);\n            await output(results.values());\n            if (!cliOptions.quiet) {\n              console.info(\"Watching for file changes.\");\n            }\n          })\n          .catch(err => {\n            console.error(err.message);\n          });\n      });\n      watcher.on(\"add\", async filename => {\n        if (isCompilableExtension(filename, cliOptions.extensions)) {\n          // ensure consistent insertion order when files are added\n          results = await getProgram(results);\n        }\n      });\n      watcher.on(\"unlink\", filename => {\n        results.delete(filename);\n      });\n      for (const type of [\"add\", \"change\"]) {\n        watcher.on(type, filename => {\n          if (!isCompilableExtension(filename, cliOptions.extensions)) {\n            return;\n          }\n\n          const start = process.hrtime();\n\n          handle(filename)\n            .then(async result => {\n              if (!result) {\n                results.delete(filename);\n                return;\n              }\n              results.set(filename, result);\n              util.assertCompilationResult(results, true);\n              await output(results.values());\n              if (!cliOptions.quiet) {\n                const [seconds, nanoseconds] = process.hrtime(start);\n                const ms = seconds * 1000 + nanoseconds * 1e-6;\n                const name = path.basename(cliOptions.outFile);\n                console.log(`Compiled ${name} in ${ms.toFixed(2)}ms`);\n              }\n            })\n            .catch(err => {\n              console.error(err.message);\n            });\n        });\n      }\n    } else {\n      util.assertCompilationResult(results, cliOptions.quiet);\n      await output(results.values());\n    }\n  }\n\n  async function stdin() {\n    let code = \"\";\n    process.stdin.setEncoding(\"utf8\");\n    for await (const chunk of process.stdin) {\n      code += chunk;\n    }\n    const res = await util.transform(\n      cliOptions.filename,\n      code,\n      {\n        ...swcOptions,\n        sourceFileName: \"stdin\",\n      },\n      cliOptions.sync,\n      undefined\n    );\n\n    output([res]);\n  }\n\n  if (cliOptions.filenames.length) {\n    await files();\n  } else {\n    await stdin();\n  }\n}\n"],"names":["util","cliOptions","swcOptions","concatResults","file","results","map","sourceRoot","code","offset","result","consumer","sources","Set","eachMapping","mapping","add","source","addMapping","generated","line","generatedLine","column","generatedColumn","original","originalLine","originalColumn","forEach","content","sourceContentFor","setSourceContent","split","length","JSON","stringify","output","sourceMapTarget","basename","outFile","outputFile","sourceMaps","process","stdout","write","Buffer","from","toString","handle","filename","sourceFileName","relative","dirname","compile","sync","getProgram","previousResults","Map","filenames","includeDotfiles","extensions","set","get","files","keys","delete","err","console","error","message","watch","watcher","on","Promise","resolve","then","assertCompilationResult","quiet","values","info","catch","type","start","hrtime","seconds","nanoseconds","ms","name","log","toFixed","stdin","setEncoding","chunk","res","transform","undefined"],"mappings":"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"}